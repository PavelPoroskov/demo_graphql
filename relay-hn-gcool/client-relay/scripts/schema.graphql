type AddToUsersLinksPayload {
  viewer: Viewer!
  clientMutationId: String!
  postedByUser: User
  linksLink: Link
  postedByUserEdge: UserEdge
  linksLinkEdge: LinkEdge
}

input AddToUsersLinksUserInput {
  linksLinkId: ID!
  postedByUserId: ID!
  clientMutationId: String!
}

type AddToUsersVotesPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  votesVote: Vote
  userUserEdge: UserEdge
  votesVoteEdge: VoteEdge
}

input AddToUsersVotesUserInput {
  votesVoteId: ID!
  userUserId: ID!
  clientMutationId: String!
}

input AddToVotesOnLinkLinkInput {
  votesVoteId: ID!
  linkLinkId: ID!
  clientMutationId: String!
}

type AddToVotesOnLinkPayload {
  viewer: Viewer!
  clientMutationId: String!
  linkLink: Link
  votesVote: Vote
  linkLinkEdge: LinkEdge
  votesVoteEdge: VoteEdge
}

input CreateLink {
  url: String!
  description: String
  postedById: ID
  postedBy: LinkpostedByUser
  votesIds: [ID!]
  votes: [LinkvotesVote!]
}

input CreateLinkInput {
  url: String!
  description: String
  postedById: ID
  postedBy: LinkpostedByUser
  votesIds: [ID!]
  votes: [LinkvotesVote!]
  clientMutationId: String!
}

type CreateLinkPayload {
  viewer: Viewer!
  clientMutationId: String!
  link: Link
  edge: LinkEdge
  postedBy: User
}

input CreateUser {
  name: String!
  votesIds: [ID!]
  votes: [UservotesVote!]
  linksIds: [ID!]
  links: [UserlinksLink!]
}

"""
If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
"""
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer!
}

input CreateVote {
  userId: ID
  user: VoteuserUser
  linkId: ID
  link: VotelinkLink
}

input CreateVoteInput {
  userId: ID
  user: VoteuserUser
  linkId: ID
  link: VotelinkLink
  clientMutationId: String!
}

type CreateVotePayload {
  viewer: Viewer!
  clientMutationId: String!
  vote: Vote
  edge: VoteEdge
  user: User
  link: Link
}

input DeleteLinkInput {
  id: ID!
  clientMutationId: String!
}

type DeleteLinkPayload {
  viewer: Viewer!
  clientMutationId: String!
  link: Link
  edge: LinkEdge
  postedBy: User
  deletedId: ID
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  deletedId: ID
}

input DeleteVoteInput {
  id: ID!
  clientMutationId: String!
}

type DeleteVotePayload {
  viewer: Viewer!
  clientMutationId: String!
  vote: Vote
  edge: VoteEdge
  user: User
  link: Link
  deletedId: ID
}

"""HelloPayload"""
type HelloPayload {
  message: String!
}

type Link implements Node {
  url: String!
  id: ID!
  postedBy(filter: UserFilter): User
  votes(filter: VoteFilter, orderBy: VoteOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection
  description: String
}

"""A connection to a list of items."""
type LinkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LinkEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

"""An edge in a connection."""
type LinkEdge {
  """The item at the end of the edge."""
  node: Link!

  """A cursor for use in pagination."""
  cursor: String!
}

input LinkFilter {
  """Logical AND on all given filters."""
  AND: [LinkFilter!]

  """Logical OR on all given filters."""
  OR: [LinkFilter!]
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  postedBy: UserFilter
  votes_every: VoteFilter
  votes_some: VoteFilter
  votes_none: VoteFilter
}

enum LinkOrderBy {
  url_ASC
  url_DESC
  id_ASC
  id_DESC
  description_ASC
  description_DESC
}

input LinkpostedByUser {
  name: String!
  votesIds: [ID!]
  votes: [UservotesVote!]
  linksIds: [ID!]
  links: [UserlinksLink!]
}

input LinkvotesVote {
  userId: ID
  user: VoteuserUser
}

type Mutation {
  createLink(input: CreateLinkInput!): CreateLinkPayload
  createVote(input: CreateVoteInput!): CreateVotePayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateLink(input: UpdateLinkInput!): UpdateLinkPayload
  updateVote(input: UpdateVoteInput!): UpdateVotePayload
  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
  updateOrCreateLink(input: UpdateOrCreateLinkInput!): UpdateOrCreateLinkPayload
  updateOrCreateVote(input: UpdateOrCreateVoteInput!): UpdateOrCreateVotePayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  deleteLink(input: DeleteLinkInput!): DeleteLinkPayload
  deleteVote(input: DeleteVoteInput!): DeleteVotePayload
  addToUsersVotes(input: AddToUsersVotesUserInput!): AddToUsersVotesPayload
  addToUsersLinks(input: AddToUsersLinksUserInput!): AddToUsersLinksPayload
  addToVotesOnLink(input: AddToVotesOnLinkLinkInput!): AddToVotesOnLinkPayload
  removeFromUsersVotes(input: RemoveFromUsersVotesUserInput!): RemoveFromUsersVotesPayload
  removeFromUsersLinks(input: RemoveFromUsersLinksUserInput!): RemoveFromUsersLinksPayload
  removeFromVotesOnLink(input: RemoveFromVotesOnLinkLinkInput!): RemoveFromVotesOnLinkPayload
  createUser(input: SignupUserInput!): CreateUserPayload!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  viewer: Viewer!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type RemoveFromUsersLinksPayload {
  viewer: Viewer!
  clientMutationId: String!
  postedByUser: User
  linksLink: Link
  postedByUserEdge: UserEdge
  linksLinkEdge: LinkEdge
}

input RemoveFromUsersLinksUserInput {
  linksLinkId: ID!
  postedByUserId: ID!
  clientMutationId: String!
}

type RemoveFromUsersVotesPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  votesVote: Vote
  userUserEdge: UserEdge
  votesVoteEdge: VoteEdge
}

input RemoveFromUsersVotesUserInput {
  votesVoteId: ID!
  userUserId: ID!
  clientMutationId: String!
}

input RemoveFromVotesOnLinkLinkInput {
  votesVoteId: ID!
  linkLinkId: ID!
  clientMutationId: String!
}

type RemoveFromVotesOnLinkPayload {
  viewer: Viewer!
  clientMutationId: String!
  linkLink: Link
  votesVote: Vote
  linkLinkEdge: LinkEdge
  votesVoteEdge: VoteEdge
}

input SignupUserInput {
  name: String!
  votesIds: [ID!]
  votes: [UservotesVote!]
  linksIds: [ID!]
  links: [UserlinksLink!]
  clientMutationId: String!
}

input UpdateLink {
  url: String
  id: ID!
  description: String
  postedById: ID
  postedBy: LinkpostedByUser
  votesIds: [ID!]
  votes: [LinkvotesVote!]
}

input UpdateLinkInput {
  url: String
  id: ID!
  description: String
  postedById: ID
  postedBy: LinkpostedByUser
  votesIds: [ID!]
  votes: [LinkvotesVote!]
  clientMutationId: String!
}

type UpdateLinkPayload {
  viewer: Viewer!
  clientMutationId: String!
  link: Link
  edge: LinkEdge
  postedBy: User
}

input UpdateOrCreateLinkInput {
  update: UpdateLink!
  create: CreateLink!
  clientMutationId: String!
}

type UpdateOrCreateLinkPayload {
  viewer: Viewer!
  clientMutationId: String!
  link: Link
  edge: LinkEdge
  postedBy: User
}

input UpdateOrCreateUserInput {
  update: UpdateUser!
  create: CreateUser!
  clientMutationId: String!
}

type UpdateOrCreateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

input UpdateOrCreateVoteInput {
  update: UpdateVote!
  create: CreateVote!
  clientMutationId: String!
}

type UpdateOrCreateVotePayload {
  viewer: Viewer!
  clientMutationId: String!
  vote: Vote
  edge: VoteEdge
  user: User
  link: Link
}

input UpdateUser {
  name: String
  id: ID!
  votesIds: [ID!]
  votes: [UservotesVote!]
  linksIds: [ID!]
  links: [UserlinksLink!]
}

input UpdateUserInput {
  name: String
  id: ID!
  votesIds: [ID!]
  votes: [UservotesVote!]
  linksIds: [ID!]
  links: [UserlinksLink!]
  clientMutationId: String!
}

type UpdateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

input UpdateVote {
  id: ID!
  userId: ID
  user: VoteuserUser
  linkId: ID
  link: VotelinkLink
}

input UpdateVoteInput {
  id: ID!
  userId: ID
  user: VoteuserUser
  linkId: ID
  link: VotelinkLink
  clientMutationId: String!
}

type UpdateVotePayload {
  viewer: Viewer!
  clientMutationId: String!
  vote: Vote
  edge: VoteEdge
  user: User
  link: Link
}

type User implements Node {
  name: String!
  id: ID!
  votes(filter: VoteFilter, orderBy: VoteOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection
  links(filter: LinkFilter, orderBy: LinkOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

input UserFilter {
  """Logical AND on all given filters."""
  AND: [UserFilter!]

  """Logical OR on all given filters."""
  OR: [UserFilter!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  votes_every: VoteFilter
  votes_some: VoteFilter
  votes_none: VoteFilter
  links_every: LinkFilter
  links_some: LinkFilter
  links_none: LinkFilter
}

input UserlinksLink {
  url: String!
  description: String
  votesIds: [ID!]
  votes: [LinkvotesVote!]
}

enum UserOrderBy {
  name_ASC
  name_DESC
  id_ASC
  id_DESC
}

input UservotesVote {
  linkId: ID
  link: VotelinkLink
}

"""This is the famous Relay viewer object"""
type Viewer {
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  allLinks(filter: LinkFilter, orderBy: LinkOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!
  allVotes(filter: VoteFilter, orderBy: VoteOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  user: User
  User(id: ID): User
  Link(id: ID): Link
  Vote(id: ID): Vote

  """hello"""
  hello(name: String): HelloPayload
  id: ID!
}

type Vote implements Node {
  id: ID!
  user(filter: UserFilter): User
  link(filter: LinkFilter): Link
}

"""A connection to a list of items."""
type VoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoteEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

"""An edge in a connection."""
type VoteEdge {
  """The item at the end of the edge."""
  node: Vote!

  """A cursor for use in pagination."""
  cursor: String!
}

input VoteFilter {
  """Logical AND on all given filters."""
  AND: [VoteFilter!]

  """Logical OR on all given filters."""
  OR: [VoteFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user: UserFilter
  link: LinkFilter
}

input VotelinkLink {
  url: String!
  description: String
  postedById: ID
  postedBy: LinkpostedByUser
  votesIds: [ID!]
  votes: [LinkvotesVote!]
}

enum VoteOrderBy {
  id_ASC
  id_DESC
}

input VoteuserUser {
  name: String!
  votesIds: [ID!]
  votes: [UservotesVote!]
  linksIds: [ID!]
  links: [UserlinksLink!]
}
