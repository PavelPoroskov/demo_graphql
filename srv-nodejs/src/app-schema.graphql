
enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

type Query {
  info: String!
  feed(filter: String, after: String, first: Int, orderBy: LinkOrderByInput): Feed!
  # Fetch a single link by its `id`
  link(id: ID!): Link
}
type Feed {
  links: [Link!]!
  count: Int!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
}

type Mutation {
  post(url: String!, description: String!): Link!
  # Update a link
  updateLink(id: ID!, url: String, description: String): Link

  # Delete a link
  deleteLink(id: ID!): Link  

  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload

  vote(linkId: ID!): Vote
}  

type Vote {
  id: ID!
  link: Link!
  user: User!
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
  createdAt: String!
}

type Subscription {
  newLink: Link
  newVote: Vote
}